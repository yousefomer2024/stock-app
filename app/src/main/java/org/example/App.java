/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

// Remove these if youâ€™re using MockStockGenerator instead of YahooFinance
// import yahoofinance.Stock;
// import yahoofinance.YahooFinance;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class App {

    // A queue to hold timestamp + stock price entries
    private static final Queue<String> stockQueue = new LinkedList<>();

    public static void main(String[] args) {
        // Create a scheduled task that runs every 10 seconds
        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

        Runnable fetchTask = () -> {
            // Dow Jones Industrial Average (mocked)
            BigDecimal price = MockStockGenerator.getPrice();

            // Format timestamp
            String timestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

            // Save to queue
            String entry = timestamp + " - Dow Jones: " + price;
            stockQueue.add(entry);

            // Print latest entry to console
            System.out.println(entry);

            // Save record to DB
            DatabaseManager.insertRecord(timestamp, price.doubleValue());

            // Keep queue size manageable (e.g., last 20 values only)
            if (stockQueue.size() > 20) {
                stockQueue.poll();
            }
        };
        
        //Inserting 1000 mock records for testing
        for (int i = 0; i < 1000; i++) {
            String timestamp = "2025-09-30 00:" + (i/60) + ":" + (i%60);
            double price = 34000 + Math.random() * 200; // random price
            DatabaseManager.insertRecord(timestamp, price);
        }


        // Schedule it to run every 10 seconds
        scheduler.scheduleAtFixedRate(fetchTask, 0, 10, TimeUnit.SECONDS);
    }
}
